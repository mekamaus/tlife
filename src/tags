Block	block.h	/^typedef unsigned short Block;$/
Cell	cell.h	/^} Cell;$/
Char	char.h	/^} Char;$/
Color	color.h	/^typedef unsigned char Color;$/
DATA_FILE	constants.c	/^#define DATA_FILE(x) (Filename) "\/tmp\/" #x$/
Dim	scalar.h	/^typedef unsigned int Dim;$/
Dim2	vector.h	/^} Dim2;$/
EscapedColor	cell.h	/^} EscapedColor;$/
Filename	file.h	/^typedef char *Filename;$/
Key	controls.h	/^typedef unsigned char Key;$/
Map	map.h	/^typedef Block *Map;$/
Mmain	main.c	/^int main() {$/
Mtags	tags	/^Mmain	main.c	\/^int main() {$\/$/
Mtest	test.c	/^int main() {$/
OFFSET_SCREEN_POSITION	player_visual.c	/^#define OFFSET_SCREEN_POSITION(result_var, offset_/
Pos	scalar.h	/^typedef int Pos;$/
Pos2	vector.h	/^} Pos2;$/
Screen	screen.h	/^typedef Cell *Screen;$/
Shape	shape.h	/^} Shape;$/
bool	bool.h	/^typedef unsigned char bool;$/
control_player	player.c	/^void control_player(Map map, const Dim2 *size, Pos/
create_empty_screen	screen.c	/^Screen create_empty_screen(const Dim2 *size) {$/
destroy_game	game.c	/^void destroy_game(Screen screen) { destroy_screen(/
destroy_screen	screen.c	/^void destroy_screen(Screen screen) {$/
display_frame	frame.c	/^void display_frame(const Screen screen, const Dim2/
draw_screen	terminal.c	/^void draw_screen(Screen screen) { printf(SCREEN_FO/
get_bg_color	cell.c	/^Color get_bg_color(const Cell *cell) { return get_/
get_color	cell.c	/^Color get_color(const EscapedColor *escaped_color)/
get_data_color	cell.c	/^Color get_data_color(const unsigned char *data) {$/
get_fg_color	cell.c	/^Color get_fg_color(const Cell *cell) { return get_/
get_map_block	map.c	/^Block get_map_block(Map map, const Dim2 *size, con/
get_map_index	map.c	/^Dim get_map_index(const Dim2 *size, const Dim2 *po/
get_screen_index	screen.c	/^Dim get_screen_index(const Dim2 *size, const Dim2 /
get_terminal_size	terminal.c	/^void get_terminal_size(Dim2 *size) {$/
get_window_size	window.c	/^bool get_window_size(Dim2 *size) {$/
hide_cursor	terminal.c	/^void hide_cursor() { system(HIDE_CURSOR_COMMAND); /
init_game	game.c	/^void init_game(const Filename player_file, Pos2 *p/
is_inside_map	map.c	/^bool is_inside_map(const Dim2 *size, const Pos2 *p/
is_map_block_empty	map.c	/^bool is_map_block_empty(Map map, const Dim2 *size,/
loop_game	game.c	/^void loop_game(const Filename player_file, Pos2 *p/
offset_position	player_visual.c	/^void offset_position(Dim2 *result, const Pos2 *sou/
read_map	map_io.c	/^void read_map(Filename filename, Map map, const Di/
read_player	player_io.c	/^void read_player(const Filename filename, Pos2 *po/
readkey	controls.c	/^char readkey() {$/
render_block	block_visual.c	/^void render_block(Cell *cell, Block block) {$/
render_map	map_visual.c	/^void render_map($/
render_player	player_visual.c	/^void render_player($/
run_game	game.c	/^void run_game() {$/
set_bg_color	cell.c	/^void set_bg_color(Cell *cell, Color color) {$/
set_color	cell.c	/^void set_color(EscapedColor *escaped_color, Color /
set_data_color	cell.c	/^void set_data_color(unsigned char *data, Color col/
set_fg_color	cell.c	/^void set_fg_color(Cell *cell, Color color) {$/
set_map_block	map.c	/^void set_map_block(Map map, const Dim2 *size, cons/
start_controls	controls.c	/^void start_controls() {$/
terminal_to_window	window.c	/^void terminal_to_window(Dim2 *window, const Dim2 */
terminal_to_window_x	window.c	/^Dim terminal_to_window_x(Dim value) { return value/
terminal_to_window_y	window.c	/^Dim terminal_to_window_y(Dim value) { return value/
update_frame	frame.c	/^bool update_frame(const Filename player_file, Pos2/
write_map	map_io.c	/^void write_map(Filename filename, Map map, const D/
write_player	player_io.c	/^void write_player(const Filename filename, const P/
