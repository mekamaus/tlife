ADJUST_XY	tags	/^ADJUST_XY	vector_math.c	\/^#define ADJUST_XY(set_v/
Block	block.h	/^typedef unsigned short Block;$/
CHANGE_XY	tags	/^CHANGE_XY	vector_math.c	\/^#define CHANGE_XY(set_v/
Cell	cell.h	/^} Cell;$/
Char	char.h	/^} Char;$/
Color	color.h	/^typedef unsigned char Color;$/
Control	control.h	/^} Control;$/
ControlKey	control.h	/^typedef unsigned char ControlKey;$/
DATA_FILE	constants.c	/^#define DATA_FILE(x) (Filename) "\/tmp\/" #x$/
DECLARE_CONTROL	control.h	/^#define DECLARE_CONTROL(name) extern const Control/
DEFINE_CONTROL	control.c	/^#define DEFINE_CONTROL(name, ch) const ControlKey /
Dim	scalar.h	/^typedef unsigned int Dim;$/
Dim2	vector.h	/^} Dim2;$/
Duration	tags	/^Duration	time.h	\/^typedef unsigned long Duration;/
EscapedColor	cell.h	/^} EscapedColor;$/
Filename	filename.h	/^typedef const char *Filename;$/
GET_CELL	player_visual.c	/^#define GET_CELL(result_var, offset_var)          /
Game	game.h	/^} Game;$/
Map	map.h	/^} Map;$/
Mmain	main.c	/^int main() {$/
Mtags	tags	/^Mmain	main.c	\/^int main() {$\/$/
Mtest	test.c	/^int main() {$/
Player	player.h	/^} Player;$/
Pos	scalar.h	/^typedef int Pos;$/
Pos2	vector.h	/^} Pos2;$/
Screen	screen.h	/^} Screen;$/
Shape	shape.h	/^} Shape;$/
Time	tags	/^Time	time.h	\/^typedef unsigned long Time;$\/$/
adjust_pos	tags	/^adjust_pos	vector_math.c	\/^void adjust_pos(Pos2 */
bool	bool.h	/^typedef unsigned char bool;$/
build_map	player_building.c	/^bool build_map(Map *map, const Player *player, Blo/
byte	cell.h	/^typedef unsigned char byte;$/
change_dim	vector_math.c	/^bool change_dim(Dim2 *dim, const Dim2 *target) { C/
change_pos	vector_math.c	/^bool change_pos(Pos2 *pos, const Pos2 *target) { C/
control_player	player_control.c	/^bool control_player(Map *map, Player *player, cons/
debug_count	debug.c	/^void debug_count() {$/
delta_from_movement_control_key	control_delta.c	/^const Pos2 *delta_from_movement_control_key(Contro/
destroy_control	control.c	/^void destroy_control(Control *control) {$/
destroy_game	game.c	/^void destroy_game(Game *game) {$/
destroy_map	map.c	/^void destroy_map(Map *map) { free(map->data); }$/
destroy_player	player.c	/^void destroy_player(Player *player) {}$/
destroy_screen	screen.c	/^void destroy_screen(Screen *screen) { free(screen-/
draw_screen	terminal.c	/^void draw_screen(const Screen *screen) {$/
get_map_block	map.c	/^Block get_map_block(const Map *map, const Dim2 *po/
get_map_index	map.c	/^Dim get_map_index(const Dim2 *size, const Dim2 *po/
get_map_length_blocks	map.c	/^Dim get_map_length_blocks(const Dim2 *size) { retu/
get_screen_cell	screen.c	/^Cell *get_screen_cell(Screen *screen, const Dim2 */
get_screen_index	init.c	/^Dim get_screen_index(const Dim2 *size, const Dim2 /
get_screen_length_cells	screen.c	/^Dim get_screen_length_cells(const Dim2 *size) {$/
get_target_block	player_target.c	/^Block get_target_block(const Map *map, const Playe/
get_terminal_size	terminal.c	/^void get_terminal_size(Dim2 *size) {$/
get_time	time.c	/^Time get_time() {$/
get_window_size	window.c	/^bool get_window_size(Dim2 *size) {$/
init_control	control.c	/^void init_control(Control *control) {$/
init_game	game.c	/^void init_game(Game *game) {$/
init_map	map.c	/^void init_map(Map *map) {$/
init_player	player.c	/^void init_player(Player *player) {$/
init_screen	screen.c	/^void init_screen(Screen *screen) {$/
is_building_control_key	control.c	/^int is_building_control_key(ControlKey key) {$/
is_step_control_key	control.c	/^int is_step_control_key(ControlKey key) {$/
is_stop_control_key	control.c	/^int is_stop_control_key(ControlKey key) { return k/
is_stride_control_key	control.c	/^int is_stride_control_key(ControlKey key) {$/
loop_game	game.c	/^void loop_game(Game *game) {$/
map_contains_target	player_target.c	/^bool map_contains_target(const Dim2 *map_size, con/
offset_position	player_visual.c	/^void offset_position(Dim2 *result, const Pos2 *sou/
player_body_from_delta	player_visual.c	/^const Shape *player_body_from_delta(const Pos2 *de/
process_frame	frame.c	/^bool process_frame(Game *game) {$/
read_loop_func	control.c	/^void *read_loop_func(void *control) {$/
read_map	map_persistence.c	/^void read_map(Filename filename, Map *map) {$/
read_player	player_persistence.c	/^void read_player(const Filename filename, Player */
render_block	block_visual.c	/^void render_block(Cell *cell, Block block) {$/
render_map	map_visual.c	/^void render_map(Screen *screen, const Map *map, co/
render_player	player_visual.c	/^void render_player(Screen *screen, const Player *p/
set_bg_color	cell.c	/^void set_bg_color(Cell *cell, Color color) {$/
set_cursor_visibility	terminal.c	/^void set_cursor_visibility(int visible) {$/
set_data_color	cell.c	/^void set_data_color(byte *data, Color color) {$/
set_fg_color	cell.c	/^void set_fg_color(Cell *cell, Color color) {$/
set_map_block	map.c	/^void set_map_block(Map *map, const Dim2 *pos, Bloc/
set_offset_from_player	player_offset.c	/^void set_offset_from_player(Pos2 *offset, const Pl/
set_screen_cell	screen.c	/^void set_screen_cell(Screen *screen, const Dim2 *p/
set_shape	cell.c	/^void set_shape(Cell *cell, const Shape *shape) { c/
set_target_block	player_target.c	/^void set_target_block(Map *map, const Player *play/
sleep_until	time.c	/^void sleep_until(Time until) {$/
snap_screen_to_window	screen_snap.c	/^bool snap_screen_to_window(Screen *screen) {$/
terminal_to_window	window.c	/^void terminal_to_window(Dim2 *window, const Dim2 */
terminal_to_window_x	window.c	/^Dim terminal_to_window_x(Dim value) { return value/
terminal_to_window_y	window.c	/^Dim terminal_to_window_y(Dim value) { return value/
write_map	map_persistence.c	/^void write_map(Filename filename, const Map *map) /
write_player	player_persistence.c	/^void write_player(const Filename filename, const P/
